{"version":3,"sources":["user.svg","Resume.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Resume","param","i","profiles","Profile","name","Object","values","location","aboutProps","map","data","index","basics","education","j","degree","college","Home","resumeInfo","Profiles","className","exact","path","component","p","key","src","icon","alt","href","email","mobile","to","pathname","App","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,yNCyB5BC,EAtBJ,SAACC,GACR,IACIC,EADAC,EAASC,EAAQD,SAEfE,EAAKC,OAAOC,OAAON,EAAMO,SAASC,YAMxC,OALAN,EAASO,KAAI,SAACC,EAAKC,GACZT,EAASS,GAAOC,OAAOR,MAAMA,IAC5BH,EAAEU,MAIN,6BACHT,EAASD,GAAGY,UAAUJ,KAAI,SAACK,GAAD,OACvB,6BACA,4BAAKA,EAAEC,QACX,2BAAID,EAAEE,SACN,mC,+BCcaC,EAzBR,WACL,IAAMC,EAAWC,EAASjB,SAC1B,OACI,6BACA,4BAAQkB,UAAU,WAAlB,qBADA,IACuD,6BACzD,6BAASA,UAAU,UACrB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWxB,KAGpCmB,EAAWT,KAAI,SAACe,EAAEb,GAAH,OACd,yBAAKS,UAAU,OAAOK,IAAKd,GACzB,yBAAKe,IAAKC,IAAMC,IAAI,iBACpB,gCAAMJ,EAAEZ,OAAOR,KAAf,KACA,uBAAGyB,KAAM,UAAUL,EAAEZ,OAAOkB,OAA5B,IAAqCN,EAAEZ,OAAOkB,MAA9C,KAHF,IAG4D,6BAC5D,uBAAGD,KAAM,OAAOL,EAAEZ,OAAOmB,QAAzB,IAAmCP,EAAEZ,OAAOmB,OAA5C,KACE,kBAAC,IAAD,CAAMC,GAAI,CAACC,SAAS,UAAWzB,WAAW,CAACJ,KAAKoB,EAAEZ,OAAOR,OACzDgB,UAAU,OADV,wBCGKc,E,iLAjBb,OACA,yBAAKd,UAAU,aACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IAGjC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,UAAUC,UAAWxB,U,GATzBoC,aCMEC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.676f091a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.ce30b484.svg\";","import React,{Component} from 'react';\r\nimport Profile from './database/data.json';\r\n\r\nlet Resume=(param)=>{\r\n    let profiles=Profile.profiles;\r\n    let i;\r\n    const name=Object.values(param.location.aboutProps)\r\n    profiles.map((data,index)=>{\r\n        if(profiles[index].basics.name==name){\r\n            i=index;\r\n        }\r\n    })\r\n    return(\r\n        <div>\r\n    {profiles[i].education.map((j)=>(\r\n        <div>\r\n        <li>{j.degree}</li>\r\n    <p>{j.college}</p>\r\n    <hr></hr>\r\n    </div>\r\n    ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Resume;","import React from 'react';\r\nimport {BrowserRouter, Route, Link}\r\nfrom 'react-router-dom';\r\nimport Profiles from './database/data.json';\r\nimport icon from './user.svg';\r\nimport Resume from './Resume';\r\n\r\nlet Home=()=>{\r\n    const resumeInfo=Profiles.profiles;\r\n    return(\r\n        <div>\r\n        <header className=\"heading\"> Resume Building </header> <br></br>\r\n      <section className=\"parent\">\r\n    <BrowserRouter>\r\n    <Route exact path=\"/resume\" component={Resume}>\r\n    </Route>\r\n    </BrowserRouter>\r\n      {resumeInfo.map((p,index)=>(\r\n        <div className=\"card\" key={index}>\r\n          <img src={icon} alt=\"profile icon\"></img>\r\n          <h2> {p.basics.name} </h2>\r\n          <a href={\"mailto:\"+p.basics.email}> {p.basics.email} </a> <br></br>\r\n        <a href={\"Tel:\"+p.basics.mobile}> {p.basics.mobile} </a>\r\n          <Link to={{pathname:\"/resume\", aboutProps:{name:p.basics.name}}}\r\n          className=\"btn\"> View Profile</Link>\r\n        </div>\r\n      ))}\r\n      </section>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Home;\r\n  ","import React,{Component} from 'react';\nimport './App.css';\nimport Resume from './Resume';\nimport {BrowserRouter, Route, Link}\nfrom 'react-router-dom';\nimport Home from './Home';\nclass App extends Component{\n\nrender(){\n  return(\n  <div className=\"container\">\n  <BrowserRouter>\n    <Route exact path=\"/\" component={Home}>\n    </Route>\n\n    <Route exact path='/resume' component={Resume}>\n    </Route>\n  </BrowserRouter>\n\n    \n  </div>\n  )\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}